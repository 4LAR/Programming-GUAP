% Определяем систему дифференциальных уравнений
function dydx = ode_system(x, y)
    dydx = zeros(2, length(x));  % Создаем массив для производных
    dydx(1, :) = y(2, :);  % Первая производная y по x
    dydx(2, :) = (3/4) * y(1, :) ./ x - (1/2) * (x.^(-1/2)) .* y(2, :);  % Второе дифференциальное уравнение
end

% Определяем граничные условия
function res = bc(ya, yb)
    res = [ya(1) - 2; yb(1) - 4.5];  % Условия на границах: y(1) = 2 и y(4) = 4.5
end

% Начальная сетка и предположение для y и y'
x = linspace(1, 4, 100);  % Создаем массив x от 1 до 4 с 100 точками
y_guess = zeros(2, length(x));  % Инициализируем массив для предположений
y_guess(1, :) = 2 + (4.5 - 2) * (x - 1) / (4 - 1);  % Линейное предположение между граничными значениями

% Решаем задачу краевых значений
sol = bvpinit(x, y_guess);  % Инициализируем решение
sol = bvp4c(@ode_system, @bc, sol);  % Решаем задачу краевых значений

% Проверяем, была ли успешной находка решения
if sol.status == 0
    disp('Решение найдено успешно.');
else
    disp('Не удалось найти решение.');
end

% Строим график результата
plot(sol.x, sol.y(1, :), 'DisplayName', 'y(x)');  % График y(x)
xlabel('x');  % Подпись оси x
ylabel('y(x)');  % Подпись оси y
title('Решение задачи краевых значений');  % Заголовок графика
legend;  % Легенда графика
grid on;  % Включаем сетку
